trigger:
- master
- develop
- feature/*
- hotfix/*
- release/*

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildApps
  jobs:
  - job: BuildHasherApp
    displayName: Building Hasher Application
    steps:
    - task: UseRubyVersion@0
      inputs:
        versionSpec: '>= 2.7'
    - task: CmdLine@2
      inputs:
          script: |
            echo 'gem install bundler'
            echo 'bundle install'
          workingDirectory: 'app/hasher/'

  - job: BuildRngApp
    displayName: Building Rng Application
    steps:
      - task: SonarCloudPrepare@1
        displayName: Preparing SonarCloud rng analysis
        inputs:
          SonarCloud: 'sonar-cloud-github'
          organization: 'teolia-1'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'teolia_teoSchool-david-projet'
          cliProjectName: 'teoSchool-david-projet'
          cliSources: '.'
          extraProperties: 'sonar.python.coverage.reportPaths=$(System.DefaultWorkingDirectory)/app/rng/coverage.xml'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.8'
          addToPath: true
          architecture: 'x64'
      - task: CmdLine@2
        displayName: Building rng Python environment
        inputs:
          script: |
            python -m pip install --upgrade pip
            pip install pipenv
            pipenv --python 3.8
            pipenv lock && \
            PIP_USER=1 \
            PIP_IGNORE_INSTALLED=1 \
            pipenv install --deploy --ignore-pipfile
          workingDirectory: 'app/rng/'
      - task: CmdLine@2
        displayName: Testing rng Python application
        inputs:
          script: |
            pipenv run pytest --junitxml=$(Build.StagingDirectory)/rng_results_$(Build.BuildId).xml --cov=rng --cov-report=xml --cov-report=html
            ls -alh $(System.DefaultWorkingDirectory)
            ls -alh $(System.DefaultWorkingDirectory)/app/rng
          workingDirectory: 'app/rng/'
      - task: PublishTestResults@2
        displayName: Publishing rng Python test results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'rng_results_$(Build.BuildId).xml'
          searchFolder: '$(Build.StagingDirectory)'
          testRunTitle: 'rng_results_$(Build.BuildId)'
      - task: PublishCodeCoverageResults@1
        displayName: Publish rng code coverage results
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/app/rng/coverage.xml'
          pathToSources: '$(System.DefaultWorkingDirectory)/app/rng/'
          reportDirectory: '$(System.DefaultWorkingDirectory)/app/rng/htmlcov'
          additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/app/rng/htmlcov/**'
      - task: DeleteFiles@1
        displayName: Deleting rng htmlcov folder
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/app/rng/htmlcov/'
          Contents: '**'
      - task: SonarCloudAnalyze@1
        displayName: Running SonarCloud rng analysis

  - job: BuildWebuiApp
    displayName: Building WebUI Application
    steps:
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'app/webui/gradlew'
        workingDirectory: 'app/webui/'
        tasks: 'build'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
        spotBugsAnalysis: false

  - job: BuildWorkerApp
    displayName: Building Worker Application
    steps:
      - task: SonarCloudPrepare@1
        displayName: Preparing SonarCloud worker analysis
        inputs:
          SonarCloud: 'sonar-cloud-github'
          organization: 'teolia-1'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'teolia_teoSchool-david-projet'
          cliProjectName: 'teoSchool-david-projet'
          cliSources: '.'
          extraProperties: 'sonar.python.coverage.reportPaths=$(System.DefaultWorkingDirectory)/app/worker/coverage.xml'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.8'
          addToPath: true
          architecture: 'x64'
      - task: CmdLine@2
        displayName: Preparing worker Python environment
        inputs:
          script: |
            python -m pip install --upgrade pip
            pip install pipenv
            pipenv --python 3.8
            pipenv lock && \
            PIP_USER=1 \
            PIP_IGNORE_INSTALLED=1 \
            pipenv install --deploy --ignore-pipfile
          workingDirectory: 'app/worker/'
      - task: CmdLine@2
        displayName: Testing worker Python application
        inputs:
          script: |
            pipenv run pytest --junitxml=$(Build.StagingDirectory)/worker_results_$(Build.BuildId).xml --cov=worker --cov-report=xml --cov-report=html
            ls -alh $(System.DefaultWorkingDirectory)
            ls -alh $(System.DefaultWorkingDirectory)/app/worker
          workingDirectory: 'app/worker/'
      - task: PublishTestResults@2
        displayName: Publishing worker Python test results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'worker_results_$(Build.BuildId).xml'
          searchFolder: '$(Build.StagingDirectory)'
          testRunTitle: 'worker_results_$(Build.BuildId)'
      - task: PublishCodeCoverageResults@1
        displayName: Publish worker code coverage results
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/app/worker/coverage.xml'
          pathToSources: '$(System.DefaultWorkingDirectory)/app/worker/'
          reportDirectory: '$(System.DefaultWorkingDirectory)/app/worker/htmlcov'
          additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/app/worker/htmlcov/**'
      - task: DeleteFiles@1
        displayName: Deleting worker htmlcov folder
        inputs:
          SourceFolder: '$(System.DefaultWorkingDirectory)/app/worker/htmlcov/'
          Contents: '**'
      - task: SonarCloudAnalyze@1
        displayName: Running SonarCloud worker analysis